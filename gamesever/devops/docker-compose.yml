version: '3.5' 

services:
  nginx:
    build:
      context: ./services/nginx
      args:
        NGINX_VERSION: nginx:${NGINX_VERSION}
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        NGINX_INSTALL_APPS: ${NGINX_INSTALL_APPS}
    container_name: nginx
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
      - "${NGINX_HTTPS_HOST_PORT}:443"
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${NGINX_SSL_CERTIFICATE_DIR}:/ssl:rw
      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/:rw
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
      #- ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:ro
      #- ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
      - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
    environment:
      TZ: "$TZ"
    restart: always
    networks:
      - goWorkNet

  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql   
    ports:
      - "${MYSQL_HOST_PORT}:3306"
    volumes:
      - ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
      - ${DATA_DIR}/mysql:/var/lib/mysql/:rw
    restart: always
    networks:
      - goWorkNet
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      TZ: "$TZ"
    command:  
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    privileged: true  

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis 
    ports:
      - "${REDIS_HOST_PORT}:6379"
    volumes:
      - ${DATA_DIR}/redis:/data/:rw
    restart: always  
    command: "redis-server --requirepass rds9Psd7g89WfhRl4  --appendonly yes"
    privileged: true
    environment:
      TZ: "$TZ"
    networks:
      - goWorkNet  


  jaeger:
    image: jaegertracing/all-in-one:1.42.0
    container_name: jaeger
    restart: always
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - LOG_LEVEL=debug
    networks:
      - goWorkNet

  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    environment: 
      TZ: "$TZ"
    volumes:
      - ./deploy/prometheus/server/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: always
    user: root
    ports:
      - 9090:9090
    networks:
      - goWorkNet

  grafana:
    image: w958660278/grafana-cn:latest-dev  
    container_name: grafana
    hostname: grafana
    user: root
    environment:
      TZ: "$TZ"
    restart: always
    volumes:
        - ./data/grafana/data:/var/lib/grafana    
        - ./deploy/grafana/grafana.ini:/etc/grafana/grafana.ini
    ports:
        - "3001:3000"
    networks:
        - goWorkNet


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    container_name: elasticsearch
    user: root
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ="$TZ"
    volumes:
      - ./data/elasticsearch/data:/usr/share/elasticsearch/data
    restart: always
    ports:
    - 9200:9200
    - 9300:9300
    networks:
      - goWorkNet
 
  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.4
    container_name: kibana
    environment:
      - elasticsearch.hosts=http://elasticsearch:9200
      - TZ="$TZ"
    restart: always
    networks:
      - goWorkNet
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch


  go-stash:
    image: kevinwan/go-stash:1.0    
    container_name: go-stash
    environment: 
      TZ: "$TZ"
    user: root
    restart: always
    volumes:
      - ./deploy/go-stash/etc:/app/etc
    networks:
      - goWorkNet
    depends_on:
      - elasticsearch
      - kafka


  filebeat:
    image: elastic/filebeat:7.13.4
    container_name: filebeat
    environment:    
      TZ: "$TZ"
    user: root
    restart: always
    entrypoint: "filebeat -e -strict.perms=false" 
    volumes:
      - ./deploy/filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - goWorkNet
    depends_on:
      - kafka


 
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    environment:
      TZ: "$TZ"
    restart: always
    ports:
      - 2181:2181
    networks:
      - goWorkNet

 
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - TZ="$TZ"
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - goWorkNet
    depends_on:
      - zookeeper

 

networks:
  goWorkNet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

